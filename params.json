{"name":"phpframework","tagline":"Велосипед собственной сборки для быстрого создания веб-приложений. PHP >= 5.2","body":"## Структура проекта\r\n\r\n\tapp\r\n\t\tconfig\r\n\t\t\tapp.php\r\n\t\t\tenv.php\r\n\t\tcontrollers\r\n\t\tmodels\r\n\t\tviews\r\n\tpublic\r\n\t\tcss\r\n\t\tim\r\n\t\tjs\r\n\t\t.htaccess\r\n\t\tindex.php\r\n\r\nДля Apache _.htaccess_ выглядит приблизительно следующим образом:\r\n\r\n\tAddDefaultCharset UTF-8\r\n\t\r\n\tOptions +FollowSymLinks +ExecCGI\r\n\t\r\n\tphp_flag    display_errors          on\r\n\tphp_flag    display_startup_errors  on\r\n\tphp_value   error_reporting         2047\r\n\tphp_flag    magic_quotes_gpc        off\r\n\t\r\n\t<IfModule mod_rewrite.c>\r\n\t\r\n\t  RewriteEngine On\r\n\t\r\n\t  RewriteCond %{REQUEST_FILENAME} !-f\r\n\t  RewriteRule ^(.*)$ index.php [QSA,L]\r\n\t\r\n\t</IfModule>\r\n\t\r\n_index.php_\r\n\r\n\t<?php\r\n\t\r\n\trequire '../../phpframework/autoload.php';\r\n\tnew Dispatcher();\r\n\t\r\nКонфигурационные настройки хранятся в папке `config`. `env.php` содержит настройки, привязанные к конкретному окружению (настройки БД и пр.), `app.php` содержит общие настройки приложения.\r\n\r\nКаждый конфигурационный файл должен возвращать массив настроек. Например:\r\n\r\n\t<?php\r\n\t\r\n\treturn array(\r\n\t    'db' => array(\r\n\t        'dsn' => 'mysql:dbname=dbname;host=localhost;charset=utf8',\r\n\t        'username' => 'root',\r\n\t        'password' => 'password'\r\n\t    )\r\n\t);\r\n\t\r\n## Роутинг\r\n\r\nДля этого в конфигурационном файле `app.php` описываются правила. Например:\r\n\r\n\t<?php\r\n\t\r\n\treturn array(\r\n\t    'routes' => array(\r\n\t        array('^/$', 'HomeController'),\r\n\t        array('^/profile', 'ProfileController')\r\n\t    )\r\n\t);\r\n\t\r\nВо втором случае на контроллер переправляются все запросы, которые начинаются на `/account`. Дополнительный роутинг может осуществляться в самом контроллере `AccountController`.\r\n\t\r\n## Контроллеры\r\n\r\nВ фреймворке имеется базовый класс `Controller`, с абстрактым методом `abstract public function handle();`. Названия классов контроллеров должны заканчиваться на `Controller`.\r\n\r\n\t<?php\r\n\t\r\n\tclass HomeController extends Controller\r\n\t{\r\n\t    public function handle()\r\n\t    {\r\n\t        $this->request->set('user', 'Вася Пупкин');\r\n\t        \r\n\t        return 'profile.php'; // для PHP представлений\r\n\t        \r\n\t        return 'profile.tpl'; // для Smarty представлений\r\n\t        \r\n\t        return array('profile.tpl', 'user', 'Вася Пупкин'); // для передачи в представление одной переменной\r\n\t        \r\n\t        return array('profile.tpl', array(\r\n\t            'user' => 'Вася Пупкин',\r\n\t            'city' => 'Дефолт сити'\r\n\t        )); // для передачи в представление массива переменных\r\n\t        \r\n\t        return 'redirect:/success'; // для редиректа на другой URL\r\n\t    }\r\n\t}\r\n\t\r\nТакже имеется контроллер с дополнительным роутингом внутри `RouterController` с абстрактным методом `abstract protected function getRoutes();`. Роутинговые правила задаются аналогично правилам в `app.php`, только вместо имен контроллеров задаются имена методов.\r\n\r\n\tclass ProfileController extends RouterController\r\n\t{\r\n\t    protected function getRoutes()\r\n\t    {\r\n\t        return array(\r\n\t            array('^/profile', 'index'),\r\n\t            array('^/profile/(\\d+)$', 'details')\r\n\t        );\r\n\t    }\r\n\t\r\n\t    public function index()\r\n\t    {\r\n\t        return array('profile/index.tpl', ProfileModel::getAll());\r\n\t    }\r\n\t    \r\n\t    public function details($id)\r\n\t    {\r\n\t        return array('profile/details.tpl', ProfileModel::get($id));\r\n\t    }\r\n\t}\r\n\r\n## Модели и работа с БД\r\n\r\nИмя класса модели должно заканчиваться на `Model`. Для работы с БД имеется класс `Db` со следующими методами:\r\n\r\n\tpublic static function query($sql, $values = null);\r\n\t\r\n\tpublic static function getValue($sql, $values = null);\r\n\t\r\n\tpublic static function getRow($sql, $values = null);\r\n\t\r\n\tpublic static function getRows($sql, $values = null);\r\n\t\r\n\tpublic static function getPairs($sql, $values = null, $keyColumn = 'id', $valueColumn = 'name');\r\n\t\r\n\tpublic static function update($sql, $values = null);\r\n\t\r\n\tpublic static function insert($sql, $values = null);\r\n\t\r\n\tpublic static function begin();\r\n\t\r\n\tpublic static function commit();\r\n\t\r\n\tpublic static function rollback();\r\n\t\r\n\tpublic static function getLogs();\r\n\r\nВсе методы, кроме `getPairs` могут вызываться следующими образами:\r\n\t\r\n\t<?php\r\n\t\r\n\t$user = Db::getRow('SELECT * FROM user WHERE id = ?', 5);\r\n\t\r\n\t$users = Db::getRows('SELECT * FROM user WHERE age BETWEEN ? AND ?', array(21, 35));\r\n\t\r\n\tили\r\n\t\r\n\t$users = Db::getRows('SELECT * FROM user WHERE age BETWEEN ? AND ?', 21, 35);\r\n\t\r\n\tили\r\n\t\r\n\t$users = Db::getRows('SELECT * FROM user WHERE age BETWEEN :from AND :to', array('from' => 21, 'to' => 35));\r\n\r\nДля простых запросов к таблицам есть класс `Entity` с методами:\r\n\r\n\tpublic static function getRow($table, $id);\r\n\t\r\n\tpublic static function getRows($table, $where = null, $order = null, $from = null, $count = null);\r\n\t\r\n\tpublic static function save($table, $data, $idColumn = 'id');\r\n\t\r\n\tpublic static function delete($table, $id);\r\n\t\r\nПримеры использования:\r\n\r\n\t$user = Entity::getRow('user', 5); // равносильно $user = Db::getRow('SELECT * FROM user WHERE id = ?', 5);\r\n\t\r\n\t$id = Entity::save('user', array('first_name' => 'Вася', 'last_name' => 'Пупкин'));\r\n\t\r\n\t// равносильно\r\n\t$id = Db::insert('INSERT user SET first_name = :first_name, last_name = :last_name', array('first_name' => 'Вася', 'last_name' => 'Пупкин'));\r\n\r\nЕсли в метод save передать в значениях id, то происходит UPDATE записи.\r\n\r\n## Формы и валидация\r\n\r\nДля валидации форм, а также любых других ассоциативных массивов, имеется класс `Validator`. Пример использования:\r\n\r\n\t<?php\r\n\t\r\n\tif ($this->request->getMethod() == 'POST') {\r\n\t\r\n\t    $validator = new Validator();\r\n\t    $validator->add('username')->required('Please, enter value');\r\n\t    $validator->add('password')->required('Please, enter value');\r\n\t\r\n\t    if ($validator->validate()) {\r\n\t        $data = $validator->getData(); // отвалидированные данные\r\n\t    } else {\r\n\t        $this->request->set('errors', $validator->getErrors()); // передача ошибок в представление\r\n\t    }\r\n\t}\r\n\r\n## Отправка почты\r\n\r\n## Работа с изображениями\r\n\r\n## Кеш\r\n\r\nВ процессе переписания кода.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}